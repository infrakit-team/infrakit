name: Publish UI Packages
on:
  push:
    tags:
      - ui-v*

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        
      - name: Install dependencies
        run: bun install
        
      - name: Set package versions, build, and publish
        uses: actions/github-script@v8
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Extract version from tag
            const tagName = context.ref.replace('refs/tags/', '');
            const version = tagName.replace('ui-v', '');
            
            if (!version || version === tagName) {
              core.setFailed(`Tag '${tagName}' does not follow the expected 'ui-v*' pattern.`);
              return;
            }
            
            core.info(`Publishing version: ${version}`);
            
            const packages = [
              'app/ui/core',
              'app/ui/adapter-hono',
              'app/ui/adapter-express'
            ];
            
            // Update package versions
            for (const pkg of packages) {
              const pkgPath = path.join(process.cwd(), pkg, 'package.json');
              
              if (!fs.existsSync(pkgPath)) {
                core.warning(`Skipping missing package: ${pkg}`);
                continue;
              }
              
              core.info(`Setting version for ${pkg}`);
              const pkgJson = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
              pkgJson.version = version;
              fs.writeFileSync(pkgPath, JSON.stringify(pkgJson, null, '\t') + '\n');
            }
            
            // Build all packages
            for (const pkg of packages) {
              const pkgPath = path.join(process.cwd(), pkg, 'package.json');
              
              if (!fs.existsSync(pkgPath)) {
                continue;
              }
              
              // Check if package has a build script
              const pkgJson = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
              if (pkgJson.scripts && pkgJson.scripts.build) {
                core.info(`Building ${pkg}`);
                await exec.exec('bun', ['run', 'build'], {
                  cwd: pkg
                });
              } else {
                core.info(`Skipping build for ${pkg} (no build script)`);
              }
            }
            
            // Publish packages
            for (const pkg of packages) {
              const pkgPath = path.join(process.cwd(), pkg, 'package.json');
              
              if (!fs.existsSync(pkgPath)) {
                continue;
              }
              
              core.info(`Publishing ${pkg}`);
              await exec.exec('bun', ['publish', '--access', 'public'], {
                cwd: pkg
              });
            }
