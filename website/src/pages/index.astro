---
import "../styles/global.css";
import { Code } from 'astro:components';

// Updated providerCode to reflect actual SDK usage from /sdk/index.ts and /express/main.ts
const providerCode = `import { InfraKit } from "@infrakit/sdk";
import { KeyValueMemoryAdapter } from "@infrakit/modules/kv";

// During development, use the in-memory adapter.
const infrakit = new InfraKit({
  keyValue:  new KeyValueMemoryAdapter()
});

// In production, you'll swap the adapter.
// const infrakit = new InfraKit({
//   keyValue:  new KeyValuePostgresAdapter({
//    connectionString: process.env.DATABASE_URL
//   })
// });`;

// Updated dashboardCode based on /adapter/express/index.ts and /express/main.ts
const dashboardCode = `import express from 'express';
import { InfraKit } from '@infrakit/sdk';
import { ExpressDashboardAdapter } from "@infrakit/adapter/express";
import { KeyValueMemoryAdapter } from "@infrakit/modules/kv";

const app = express();

// Instantiate InfraKit with your modules
const infrakit = new InfraKit({
  keyValue: new KeyValueMemoryAdapter()
});

// Add the dashboard to your app with an adapter
const dashboard = new ExpressDashboardAdapter({
  infrakit,
  baseUrl: '/admin'
});

app.use('/admin', dashboard.endpoint);`;

// Updated modules to only include what's in the codebase (/modules/kv)
const modules = [
  {
    icon: "M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z",
    title: "Key-Value Store",
    description: "Perfect for caching, session management, or feature flags. Browse keys, edit values, and monitor TTLs directly from the dashboard."
  }
];

// Added comingSoonModules to display faded cards with badges
const comingSoonModules = [
  {
    icon: "M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 6v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z",
    title: "Job Queue",
    description: "Run background jobs and process tasks asynchronously. Monitor job status, inspect payloads, and retry failures with a single click."
  },
  {
    icon: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z",
    title: "Cron Scheduler",
    description: "Schedule recurring tasks and internal automation. View execution history, trigger jobs manually, and check logs without leaving the UI."
  }
];

// Updated backendProviders to reflect current and future state
const backendProviders = ['Memory', 'Postgres (soon)', 'Redis (soon)', 'MySQL (soon)', 'More...'];
const frontendIntegrations = ['Express', 'Hono', 'Fastify', 'H3', 'Koa', 'Next.js'];

const codeExamples = {
  module: {
    keyvalue: {
      memory: `import { InfraKit } from "@infrakit/sdk";
import { KeyValueMemoryAdapter } from "@infrakit/modules/kv";

const infrakit = new InfraKit({
  keyValue: new KeyValueMemoryAdapter()
});

// Use the key-value store
await infrakit.keyValue.set('user:123', { name: 'Alice' });
const user = await infrakit.keyValue.get('user:123');`,

      postgres: `import { InfraKit } from "@infrakit/sdk";
import { KeyValuePostgresAdapter } from "@infrakit/modules/kv";

const infrakit = new InfraKit({
  keyValue: new KeyValuePostgresAdapter({
    connectionString: process.env.DATABASE_URL
  })
});

// Same API, different backend
await infrakit.keyValue.set('user:123', { name: 'Alice' });
const user = await infrakit.keyValue.get('user:123');`,

      redis: `import { InfraKit } from "@infrakit/sdk";
import { KeyValueRedisAdapter } from "@infrakit/modules/kv";

const infrakit = new InfraKit({
  keyValue: new KeyValueRedisAdapter({
    host: process.env.REDIS_HOST,
    port: 6379
  })
});

// Same API, Redis backend
await infrakit.keyValue.set('user:123', { name: 'Alice' });
const user = await infrakit.keyValue.get('user:123');`
    }
  },

  dashboard: {
    express: `import express from 'express';
import { ExpressDashboardAdapter } from "@infrakit/adapter/express";

const app = express();

// Mount dashboard to Express app
const dashboard = new ExpressDashboardAdapter({
  infrakit,
  baseUrl: '/admin'
});

app.use('/admin', dashboard.endpoint);
app.listen(3000);`,

    hono: `import { Hono } from 'hono';
import { HonoDashboardAdapter } from "@infrakit/adapter/hono";

const app = new Hono();

// Mount dashboard to Hono app
const dashboard = new HonoDashboardAdapter({
  infrakit,
  baseUrl: '/admin'
});

app.route('/admin', dashboard.endpoint);`,

    fastify: `import Fastify from 'fastify';
import { FastifyDashboardAdapter } from "@infrakit/adapter/fastify";

const fastify = Fastify();

// Mount dashboard to Fastify app
const dashboard = new FastifyDashboardAdapter({
  infrakit,
  baseUrl: '/admin'
});

fastify.register(dashboard.plugin, { prefix: '/admin' });`
  }
};

const defaultModule = "keyvalue";
const defaultAdapter = "memory";
const defaultDashboard = "express";

const keyValueEntries = [
  {
    key: "session:user:10000",
    value: `{"userId":10000,"name":"Alice"}`,
    createdAt: "Oct 17, 2025, 12:16 PM",
    ttl: "No expiry",
  },
  {
    key: "session:user:10001",
    value: `{"userId":10001,"name":"Evan"}`,
    createdAt: "Oct 17, 2025, 12:16 PM",
    ttl: "No expiry",
  },
  {
    key: "session:user:10002",
    value: `{"userId":10002,"name":"Lina"}`,
    createdAt: "Oct 17, 2025, 12:16 PM",
    ttl: "2h 15m",
  },
  {
    key: "session:user:10003",
    value: `{"userId":10003,"name":"Sanjay"}`,
    createdAt: "Oct 17, 2025, 12:16 PM",
    ttl: "No expiry",
  },
  {
    key: "session:user:10004",
    value: `{"userId":10004,"name":"Maya"}`,
    createdAt: "Oct 17, 2025, 12:16 PM",
    ttl: "48m",
  },
  {
    key: "session:user:10005",
    value: `{"userId":10005,"name":"Felix"}`,
    createdAt: "Oct 17, 2025, 12:16 PM",
    ttl: "No expiry",
  },
];

const paginationSummary = {
  selected: 0,
  total: keyValueEntries.length,
  rowsPerPage: 10,
  page: 1,
  totalPages: 97,
};

const footerLinks = {
  resources: [{
    label: 'Documentation',
    href: "/docs/overview/introduction"
  }],
};
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>InfraKit</title>
  </head>
  <body>
    <!-- Header -->
    <header id="header" class="fixed top-6 left-0 right-0 z-50 transition-all duration-300">
      <div class="max-w-7xl mx-auto px-6">
        <div class="header-content bg-white/60 backdrop-blur-md border border-primary-6 rounded-2xl px-4 py-3 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between sm:px-6 sm:py-4">
          <div class="flex w-full items-center justify-between gap-3 sm:w-auto sm:gap-4">
            <div class="flex items-center gap-3">
              <div class="relative">
                <div class="relative bg-primary-9 p-2 rounded-lg">
                  <svg class="w-6 h-6 text-primary-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="2 17 12 22 22 17" ></polyline>
                    <polyline points="2 12 12 17 22 12"></polyline>
                    <polygon points="12 2 2 7 12 12 22 7 12 2" ></polygon>
                  </svg>
                </div>
              </div>
              <span class="text-2xl font-bold text-primary-12">InfraKit</span>
            </div>
            <button
              id="mobile-nav-toggle"
              type="button"
              class="inline-flex h-10 w-10 items-center justify-center rounded-lg border border-primary-6 text-primary-12 transition hover:bg-primary-3 hover:border-primary-7 focus:outline-none focus:ring-2 focus:ring-primary-7 sm:hidden"
              aria-expanded="false"
              aria-controls="header-nav"
              aria-label="Toggle navigation"
            >
              <svg class="icon-hamburger h-5 w-5" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round">
                <line x1="4" y1="7" x2="20" y2="7"></line>
                <line x1="4" y1="12" x2="20" y2="12"></line>
                <line x1="4" y1="17" x2="20" y2="17"></line>
              </svg>
              <svg class="icon-close hidden h-5 w-5" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <line x1="6" y1="6" x2="18" y2="18"></line>
                <line x1="6" y1="18" x2="18" y2="6"></line>
              </svg>
            </button>
          </div>
          <nav
            id="header-nav"
            class="hidden w-full flex-col gap-2 border-t border-primary-6 pt-2 sm:flex sm:w-auto sm:flex-row sm:items-center sm:justify-end sm:border-0 sm:pt-0"
          >
            <a 
              href="/docs/overview/introduction" 
              target="_blank"
              class="flex items-center justify-center gap-2 px-5 py-2.5 text-sm font-medium text-primary-12 border border-primary-6 rounded-lg hover:bg-primary-3 hover:border-primary-7 transition-all w-full sm:w-auto"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
              </svg>
              Documentation
            </a>
            <a 
              href="https://github.com/infrakit" 
              class="flex items-center justify-center gap-2 px-5 py-2.5 bg-primary-12 text-primary-1 rounded-lg text-sm font-medium hover:bg-primary-11 transition-all shadow-lg w-full sm:w-auto"
            >
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
              </svg>
              Star on GitHub
            </a>
          </nav>
        </div>
      </div>
    </header>

    <!-- Hero Section -->
    <section class="bg-primary-2 relative overflow-hidden">
      <div class="relative max-w-7xl mx-auto hero-shell">
        <div class="text-center mb-14 space-y-6">
          <h1 class="hero-title font-bold text-primary-12 leading-tight max-w-4xl mx-auto">
            Open-source Infrastructure Primitives
          </h1>
          <p class="hero-subtitle text-primary-11 max-w-3xl mx-auto leading-relaxed">
            An open-source toolkit for common backend infrastructure, with a built-in admin dashboard for TypeScript.
          </p>
        </div>

        <div class="text-center space-y-5">
          <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center">
            <a
              href="/docs/overview/getting-started"
              class="inline-flex items-center justify-center gap-2 bg-primary-12 text-primary-1 px-8 py-4 rounded-xl font-semibold text-lg hover:bg-primary-11 transition-all shadow-lg"
            >
              Get Started
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
              </svg>
            </a>
            <a
              href="/docs/modules/key-value"
              class="inline-flex items-center justify-center gap-2 bg-primary-3 text-primary-12 px-8 py-4 rounded-xl font-semibold text-lg border border-primary-6 hover:bg-primary-4 hover:border-primary-7 transition-all"
            >
              View Modules
            </a>
          </div>
        </div>
      </div>
    </section>

    <!-- Architecture Diagram Section -->
    <section class="relative overflow-hidden bg-primary-1 py-16 sm:py-24">
      <div class="absolute inset-0 bg-gradient-to-br from-primary-2 via-primary-2 to-primary-1"></div>
      <div class="absolute top-1/4 right-1/3 hidden h-[32rem] w-[32rem] rounded-full bg-primary-9 mix-blend-multiply filter blur-3xl opacity-5 sm:block"></div>
      <div class="relative max-w-7xl mx-auto section-shell">
        
        <div class="text-center mb-12 sm:mb-16">
          <span class="inline-block text-[0.8125rem] font-semibold text-primary-11 tracking-[0.1em] uppercase mb-4 px-3.5 py-1.5 bg-primary-3 rounded-md">
            Architecture
          </span>
          <h2 class="section-title font-bold text-primary-12 mb-4">How It Works</h2>
          <p class="section-subtitle text-primary-11 max-w-3xl mx-auto">
            Mix and match modules with adapters, then view everything through one unified dashboard.
          </p>
        </div>

        <!-- Top Row: Modules + Adapters and Dashboard Adapters -->
        <div class="grid gap-6 mb-12 lg:grid-cols-2 lg:gap-8">
          
          <!-- Left: Modules + Module Adapters -->
          <div class="rounded-2xl border-2 border-primary-6 bg-primary-2 p-6 sm:p-8">
            <h3 class="text-lg font-bold text-primary-12 mb-6 flex items-center gap-2">
              <span>Modules + Module Adapter</span>
            </h3>
            
            <!-- Modules Row -->
            <div class="flex flex-wrap justify-center gap-3 mb-6">
              <button 
                class="module-btn bg-primary-1 border border-primary-9 rounded-lg px-4 py-2.5 text-sm font-semibold text-primary-12 shadow-sm hover:bg-primary-3 transition-all cursor-pointer"
                data-module="keyvalue"
              >
                KeyValue
              </button>
              <button 
                class="module-btn bg-primary-1 border border-primary-6 rounded-lg px-4 py-2.5 text-sm font-semibold text-primary-11 opacity-60 cursor-not-allowed"
                disabled
              >
                Queue
              </button>
              <button 
                class="module-btn bg-primary-1 border border-primary-6 rounded-lg px-4 py-2.5 text-sm font-semibold text-primary-11 opacity-60 cursor-not-allowed"
                disabled
              >
                Cron
              </button>
            </div>

            <!-- Connection Lines (Visual) -->
            <div class="flex justify-center mb-6">
              <div class="relative w-48 h-12">
                <svg class="w-full h-full" viewBox="0 0 200 50">
                  <line x1="33" y1="0" x2="33" y2="50" stroke="currentColor" stroke-width="2" class="text-primary-7" stroke-dasharray="4 4"/>
                  <line x1="100" y1="0" x2="66" y2="50" stroke="currentColor" stroke-width="2" class="text-primary-6" stroke-dasharray="4 4"/>
                  <line x1="167" y1="0" x2="133" y2="50" stroke="currentColor" stroke-width="2" class="text-primary-6" stroke-dasharray="4 4"/>
                  <line x1="33" y1="0" x2="100" y2="50" stroke="currentColor" stroke-width="2" class="text-primary-7" stroke-dasharray="4 4"/>
                  <line x1="100" y1="0" x2="100" y2="50" stroke="currentColor" stroke-width="2" class="text-primary-6" stroke-dasharray="4 4"/>
                  <line x1="167" y1="0" x2="100" y2="50" stroke="currentColor" stroke-width="2" class="text-primary-6" stroke-dasharray="4 4"/>
                </svg>
              </div>
            </div>

            <!-- Adapters Row -->
            <div id="adapter-buttons" class="flex flex-wrap justify-center gap-3 mb-6">
              <button class="adapter-btn bg-primary-1 border border-primary-6 rounded-lg px-4 py-2.5 text-sm font-semibold text-primary-12 hover:bg-primary-3 transition-all cursor-pointer" data-adapter="postgres">
                Postgres
              </button>
              <button class="adapter-btn bg-primary-1 border border-primary-6 rounded-lg px-4 py-2.5 text-sm font-semibold text-primary-12 hover:bg-primary-3 transition-all cursor-pointer" data-adapter="redis">
                Redis
              </button>
              <button class="adapter-btn bg-primary-1 border border-primary-9 rounded-lg px-4 py-2.5 text-sm font-semibold text-primary-12 shadow-sm hover:bg-primary-3 transition-all cursor-pointer" data-adapter="memory">
                Memory
              </button>
            </div>

            <!-- Code Display Area -->
            <div
              id="module-code-display"
              class="code-panel bg-primary-1 border-2 border-primary-6 rounded-xl overflow-hidden"
              data-default-module={defaultModule}
              data-default-adapter={defaultAdapter}
            >
              <div class="code-panel-header flex items-center gap-2 px-4 py-3 bg-primary-3 border-b border-primary-6">
                <div class="w-3 h-3 rounded-full bg-primary-6"></div>
                <div class="w-3 h-3 rounded-full bg-primary-6"></div>
                <div class="w-3 h-3 rounded-full bg-primary-6"></div>
              </div>
              <div class="relative">
                {Object.entries(codeExamples.module.keyvalue).map(([adapter, code]) => (
                  <div
                    class="module-code-snippet"
                    data-module="keyvalue"
                    data-adapter={adapter}
                    data-code-example
                    hidden={adapter !== defaultAdapter}
                    aria-hidden={adapter !== defaultAdapter}
                  >
                    <Code
                      code={code}
                      lang="ts"
                      theme="github-light"
                      class="code-block"
                    />
                  </div>
                ))}
              </div>
            </div>
          </div>

          <!-- Right: Dashboard Adapters -->
          <div class="rounded-2xl border-2 border-primary-6 bg-primary-2 p-6 sm:p-8">
            <h3 class="text-lg font-bold text-primary-12 mb-6">Dashboard Adapter</h3>
            
            <div class="flex flex-wrap justify-center gap-3 mb-6">
              <button class="dashboard-adapter-btn bg-primary-1 border border-primary-9 rounded-lg px-4 py-2.5 text-sm font-semibold text-primary-12 shadow-sm hover:bg-primary-3 transition-all cursor-pointer" data-framework="express">
                Express
              </button>
              <button class="dashboard-adapter-btn bg-primary-1 border border-primary-6 rounded-lg px-4 py-2.5 text-sm font-semibold text-primary-12 hover:bg-primary-3 transition-all cursor-pointer" data-framework="hono">
                Hono
              </button>
              <button class="dashboard-adapter-btn bg-primary-1 border border-primary-6 rounded-lg px-4 py-2.5 text-sm font-semibold text-primary-12 hover:bg-primary-3 transition-all cursor-pointer" data-framework="fastify">
                Fastify
              </button>
            </div>

            <div class="text-center mb-6">
              <div class="inline-flex items-center gap-2 text-primary-11 text-sm">
                <span>Mounts into your server</span>
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
                </svg>
              </div>
            </div>

            <!-- Dashboard Code Display Area -->
            <div
              id="dashboard-code-display"
              class="code-panel bg-primary-1 border-2 border-primary-6 rounded-xl overflow-hidden"
              data-default-dashboard={defaultDashboard}
            >
              <div class="code-panel-header flex items-center gap-2 px-4 py-3 bg-primary-3 border-b border-primary-6">
                <div class="w-3 h-3 rounded-full bg-primary-6"></div>
                <div class="w-3 h-3 rounded-full bg-primary-6"></div>
                <div class="w-3 h-3 rounded-full bg-primary-6"></div>
              </div>
              <div class="relative">
                {Object.entries(codeExamples.dashboard).map(([framework, code]) => (
                  <div
                    class="dashboard-code-snippet"
                    data-framework={framework}
                    data-dashboard-code
                    hidden={framework !== defaultDashboard}
                    aria-hidden={framework !== defaultDashboard}
                  >
                    <Code
                      code={code}
                      lang="ts"
                      theme="github-light"
                      class="code-block"
                    />
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
        <div class="rounded-3xl border-2 border-primary-6 bg-gradient-to-br from-primary-2/90 to-primary-3/80 p-6 shadow-xl sm:p-8 lg:p-10">
          <div class="max-w-4xl mx-auto space-y-6">
            <div class="text-center md:text-left space-y-2 text-primary-11">
              <span class="inline-flex items-center gap-2 rounded-full border border-primary-6 bg-primary-1/80 px-3 py-1 text-xs font-semibold uppercase tracking-widest text-primary-10">
                Website + Dashboard
              </span>
              <h3 class="text-2xl font-semibold text-primary-12">
                Launch your product site and get <span class="font-bold">acme.com/admin</span> for free.
              </h3>
              <p class="text-sm md:text-base">
                InfraKit ships a production-ready admin at <span class="font-mono text-primary-12">/admin</span> so you can focus on your customer-facing experience.
              </p>
            </div>
            <div class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
              <div class="relative w-full sm:max-w-sm">
                <svg class="absolute left-4 top-1/2 -translate-y-1/2 h-4 w-4 text-primary-11" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <circle cx="11" cy="11" r="7"></circle>
                  <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
                <input
                  type="search"
                  placeholder="Search keys…"
                  class="w-full rounded-xl border border-primary-6 bg-primary-1/80 py-2.5 pl-11 pr-4 text-sm text-primary-12 shadow-sm placeholder:text-primary-10 focus:border-primary-8 focus:outline-none focus:ring-2 focus:ring-primary-7/40"
                />
              </div>
              <button class="inline-flex w-full items-center justify-center gap-2 rounded-xl bg-primary-12 px-4 py-2 text-sm font-semibold text-primary-1 shadow-lg transition hover:bg-primary-11 sm:w-auto">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <line x1="12" y1="5" x2="12" y2="19" stroke-linecap="round"></line>
                  <line x1="5" y1="12" x2="19" y2="12" stroke-linecap="round"></line>
                </svg>
                Add Key
              </button>
            </div>

            <div class="bg-primary-1/90 border border-primary-6 rounded-2xl overflow-hidden shadow-2xl">
              <div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between border-b border-primary-6 bg-primary-2/40 px-6 py-3 text-xs font-medium text-primary-11">
                <div class="flex items-center gap-2">
                  <span class="inline-flex h-2.5 w-2.5 rounded-full bg-emerald-400"></span>
                  <span class="font-mono text-primary-12">https://acme.com/admin</span>
                </div>
                <span class="hidden sm:inline text-primary-10">Built-in InfraKit Dashboard</span>
              </div>
              <div class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between border-b border-primary-6 bg-primary-2/60 px-6 py-4">
                <div>
                  <h3 class="text-lg font-semibold text-primary-12">Key-Value Store</h3>
                  <p class="text-sm text-primary-11">Managing {keyValueEntries.length} keys across all adapters</p>
                </div>
                <div class="flex w-full items-center justify-center gap-3 sm:w-auto sm:justify-end">
                  <button class="inline-flex w-full items-center justify-center gap-2 rounded-lg border border-primary-6 bg-primary-1 px-3 py-1.5 text-sm font-medium text-primary-11 transition hover:bg-primary-3 hover:text-primary-12 sm:w-auto">
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                      <line x1="4" y1="6" x2="20" y2="6" stroke-linecap="round"></line>
                      <line x1="4" y1="12" x2="20" y2="12" stroke-linecap="round"></line>
                      <line x1="4" y1="18" x2="20" y2="18" stroke-linecap="round"></line>
                    </svg>
                    Filters
                  </button>
                </div>
              </div>

              <div class="overflow-x-auto">
                <table class="w-full text-left text-sm text-primary-12">
                  <thead class="border-b border-primary-6 bg-primary-2/80 text-xs uppercase tracking-wide text-primary-11">
                    <tr>
                      <th class="px-5 py-3">
                        <input type="checkbox" class="h-4 w-4 rounded border-primary-7 text-primary-12 focus:ring-primary-7" />
                      </th>
                      <th class="px-5 py-3">Key</th>
                      <th class="px-5 py-3">Value</th>
                      <th class="px-5 py-3">Created</th>
                      <th class="px-5 py-3">TTL</th>
                      <th class="px-5 py-3 text-right">Actions</th>
                    </tr>
                  </thead>
                  <tbody class="divide-y divide-primary-6">
                    {keyValueEntries.map((entry) => (
                      <tr class="transition hover:bg-primary-3/40">
                        <td class="px-5 py-4">
                          <input type="checkbox" class="h-4 w-4 rounded border-primary-7 text-primary-12 focus:ring-primary-7" />
                        </td>
                        <td class="px-5 py-4 font-mono text-xs text-primary-11">{entry.key}</td>
                        <td class="px-5 py-4 font-mono text-xs text-primary-12">
                          {entry.value.length > 34 ? `${entry.value.slice(0, 31)}…` : entry.value}
                        </td>
                        <td class="px-5 py-4 text-xs text-primary-11">{entry.createdAt}</td>
                        <td class="px-5 py-4">
                          <span
                            class={`inline-flex items-center rounded-lg border px-2.5 py-0.5 text-xs font-semibold ${
                              entry.ttl === "No expiry"
                                ? "border-primary-6 text-primary-11"
                                : "border-amber-500/60 bg-amber-500/10 text-amber-400"
                            }`}
                          >
                            {entry.ttl}
                          </span>
                        </td>
                        <td class="px-5 py-4 text-right">
                          <button class="inline-flex h-8 w-8 items-center justify-center rounded-lg border border-primary-6 text-primary-11 transition hover:bg-primary-3 hover:text-primary-12">
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                              <polyline points="9 18 15 12 9 6" stroke-linecap="round" stroke-linejoin="round"></polyline>
                            </svg>
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              <div class="flex flex-col gap-4 border-t border-primary-6 bg-primary-2/60 px-6 py-4 text-sm text-primary-11 sm:flex-row sm:items-center sm:justify-between">
                <p>
                  {paginationSummary.selected} of {paginationSummary.total} row(s) selected.
                </p>
                <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-6">
                  <div class="flex items-center gap-2">
                    <span>Rows per page</span>
                    <div class="flex items-center gap-2 rounded-lg border border-primary-6 bg-primary-1 px-3 py-1.5 text-primary-12 shadow-sm">
                      <span>{paginationSummary.rowsPerPage}</span>
                      <svg class="h-3.5 w-3.5 text-primary-10" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                        <polyline points="7 10 12 15 17 10" stroke-linecap="round" stroke-linejoin="round"></polyline>
                      </svg>
                    </div>
                  </div>
                  <div class="flex items-center gap-3">
                    <span>
                      Page {paginationSummary.page} of {paginationSummary.totalPages}
                    </span>
                    <div class="flex items-center gap-2">
                      <button class="inline-flex h-8 w-8 items-center justify-center rounded-lg border border-primary-6 text-primary-11 transition hover:bg-primary-3 hover:text-primary-12" aria-label="First page">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                          <polyline points="13 6 7 12 13 18" stroke-linecap="round" stroke-linejoin="round"></polyline>
                          <polyline points="17 6 11 12 17 18" stroke-linecap="round" stroke-linejoin="round"></polyline>
                        </svg>
                      </button>
                      <button class="inline-flex h-8 w-8 items-center justify-center rounded-lg border border-primary-6 text-primary-11 transition hover:bg-primary-3 hover:text-primary-12" aria-label="Previous page">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                          <polyline points="15 6 9 12 15 18" stroke-linecap="round" stroke-linejoin="round"></polyline>
                        </svg>
                      </button>
                      <button class="inline-flex h-8 w-8 items-center justify-center rounded-lg border border-primary-6 text-primary-11 transition hover:bg-primary-3 hover:text-primary-12" aria-label="Next page">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                          <polyline points="9 6 15 12 9 18" stroke-linecap="round" stroke-linejoin="round"></polyline>
                        </svg>
                      </button>
                      <button class="inline-flex h-8 w-8 items-center justify-center rounded-lg border border-primary-6 text-primary-11 transition hover:bg-primary-3 hover:text-primary-12" aria-label="Last page">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                          <polyline points="7 6 13 12 7 18" stroke-linecap="round" stroke-linejoin="round"></polyline>
                          <polyline points="11 6 17 12 11 18" stroke-linecap="round" stroke-linejoin="round"></polyline>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
    </section>

    <!-- Modules Detail Section -->
    <section class="relative overflow-hidden bg-primary-2 py-16 sm:py-24">
      <div class="absolute inset-0 bg-gradient-to-br from-primary-1 via-primary-2 to-primary-1"></div>
      <div class="relative max-w-7xl mx-auto section-shell">

        <div class="text-center mb-12 sm:mb-16">
          <h2 class="section-title font-bold text-primary-12 mb-4">Available Modules</h2>
          <p class="section-subtitle text-primary-11 max-w-3xl mx-auto">
            Production-ready infrastructure primitives with built-in dashboard management.
          </p>
        </div>

        <div class="grid items-start gap-8 lg:grid-cols-2 lg:gap-12">
          <div class="space-y-6">
            {modules.map(module => (
              <div class="bg-primary-1 border border-primary-6 rounded-2xl p-6 hover:border-primary-7 transition-all">
                <div class="flex gap-4">
                  <div class="flex-shrink-0">
                    <div class="w-12 h-12 bg-gradient-to-br from-primary-3 to-primary-4 border border-primary-6 rounded-xl flex items-center justify-center">
                      <svg class="w-6 h-6 text-primary-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={module.icon}/>
                      </svg>
                    </div>
                  </div>
                  <div class="flex-1">
                    <h3 class="text-xl font-bold text-primary-12 mb-2">{module.title}</h3>
                    <p class="text-primary-11 leading-relaxed">{module.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div class="lg:sticky lg:top-24 space-y-6">
            {comingSoonModules.map(module => (
              <div class="bg-primary-1 border border-primary-6 rounded-2xl p-6 opacity-60 pointer-events-none">
                <div class="flex gap-4">
                  <div class="flex-shrink-0">
                    <div class="w-12 h-12 bg-gradient-to-br from-primary-3 to-primary-4 border border-primary-6 rounded-xl flex items-center justify-center">
                      <svg class="w-6 h-6 text-primary-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={module.icon}/>
                      </svg>
                    </div>
                  </div>
                  <div class="flex-1">
                    <div class="flex items-center gap-3 mb-2">
                      <h3 class="text-xl font-bold text-primary-12">{module.title}</h3>
                      <span class="inline-block text-[0.7rem] font-semibold text-primary-11 tracking-wide uppercase px-2 py-0.5 bg-primary-3 rounded-md">
                        Coming Soon
                      </span>
                    </div>
                    <p class="text-primary-11 leading-relaxed">{module.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- CTA Section -->
    <section class="relative overflow-hidden bg-primary-1 py-16 sm:py-24">
      <div class="absolute inset-0 bg-gradient-to-br from-primary-2 via-primary-2 to-primary-1"></div>
      <div class="absolute top-0 right-1/4 hidden h-[32rem] w-[32rem] rounded-full bg-primary-9 mix-blend-multiply filter blur-3xl opacity-5 sm:block"></div>
      <div class="relative max-w-7xl mx-auto section-shell">
        <div class="relative overflow-hidden rounded-3xl border-2 border-primary-6 bg-gradient-to-br from-primary-1 via-primary-2 to-primary-3 p-8 sm:p-12 lg:p-16">
          <div class="absolute top-0 right-1/4 hidden h-96 w-96 rounded-full bg-primary-9 mix-blend-multiply filter blur-3xl opacity-10 sm:block"></div>
          <div class="absolute bottom-0 left-1/4 hidden h-96 w-96 rounded-full bg-primary-9 mix-blend-multiply filter blur-3xl opacity-10 sm:block"></div>
          
          <div class="relative text-center space-y-6">
            <h2 class="section-title font-bold text-primary-12 max-w-3xl mx-auto leading-tight">
              Build Better Infrastructure, Faster.
            </h2>
            <p class="section-subtitle text-primary-11 max-w-2xl mx-auto">
              Get started with open-source modules and a built-in admin UI. Ship your product, not your plumbing.
            </p>
            <div class="pt-4">
              <a
                href="/docs/overview/getting-started"
                class="inline-flex items-center justify-center gap-2 rounded-xl bg-primary-12 px-8 py-4 text-lg font-semibold text-primary-1 transition-all shadow-lg hover:bg-primary-11 sm:px-10 sm:py-5"
              >
                Start Building Now
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Footer -->
    <footer class="bg-primary-1 border-t border-primary-6">
      <div class="max-w-7xl mx-auto px-6 py-16">
        <div class="grid md:grid-cols-2 lg:grid-cols-5 gap-12 mb-12">
          <div class="lg:col-span-2">
            <div class="flex items-center gap-3 mb-4">
              <div class="relative">
                <div class="absolute inset-0 bg-primary-9/10 rounded-lg blur-md"></div>
                <div class="relative bg-primary-3 p-2 rounded-lg border border-primary-6">
                  <svg class="w-6 h-6 text-primary-12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polygon points="12 2 2 7 12 12 22 7 12 2" opacity="0.4"></polygon>
                    <polyline points="2 17 12 22 22 17" opacity="0.7"></polyline>
                    <polyline points="2 12 12 17 22 12"></polyline>
                  </svg>
                </div>
              </div>
              <span class="text-2xl font-bold text-primary-12">InfraKit</span>
            </div>
            <p class="text-primary-11 mb-6 max-w-sm">
              The open-source infrastructure framework with built-in UI. Production-ready modules for modern applications.
            </p>
            <div class="flex items-center gap-4">
              <a href="https://github.com/infrakit" class="text-primary-11 hover:text-primary-12 transition-colors" aria-label="GitHub">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                </svg>
              </a>
              <a href="https://twitter.com/infrakit" class="text-primary-11 hover:text-primary-12 transition-colors" aria-label="Twitter">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                </svg>
              </a>
              <a href="https://discord.gg/infrakit" class="text-primary-11 hover:text-primary-12 transition-colors" aria-label="Discord">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515a.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0a12.64 12.64 0 0 0-.617-1.25a.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057a19.9 19.9 0 0 0 5.993 3.03a.078.078 0 0 0 .084-.028a14.09 14.09 0 0 0 1.226-1.994a.076.076 0 0 0-.041-.106a13.107 13.107 0 0 1-1.872-.892a.077.077 0 0 1-.008-.128a10.2 10.2 0 0 0 .372-.292a.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127a12.299 12.299 0 0 1-1.873.892a.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028a19.839 19.839 0 0 0 6.002-3.03a.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.956-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.955-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.946 2.418-2.157 2.418z"/>
                </svg>
              </a>
            </div>
          </div>


          <div>
            <h3 class="text-sm font-semibold text-primary-12 uppercase tracking-wider mb-4">Resources</h3>
            <ul class="space-y-3">
              {footerLinks.resources.map(link => (
                <li><a target="_blank" href={link.href} class="text-primary-11 hover:text-primary-12 transition-colors">{link.label}</a></li>
              ))}
            </ul>
          </div>

        </div>

        <div class="pt-8 border-t border-primary-6">
          <p class="text-sm text-primary-11 text-center">
            © 2025 InfraKit. All rights reserved. Built with ❤️ for developers.
          </p>
        </div>
      </div>
    </footer>

    <style>
      .hero-shell {
        padding-block: clamp(2.75rem, 8vw, 5.5rem);
        padding-inline: clamp(1.25rem, 5vw, 3rem);
        padding-top: clamp(5rem, 14vw, 10rem);
      }

      .section-shell {
        padding: clamp(2.75rem, 7vw, 5rem) clamp(1.25rem, 5vw, 2.75rem);
      }

      .hero-title {
        font-size: clamp(2rem, 6vw, 3.25rem);
      }

      .hero-subtitle {
        font-size: clamp(1rem, 3vw, 1.5rem);
      }

      .section-title {
        font-size: clamp(1.875rem, 5vw, 2.75rem);
      }

      .section-subtitle {
        font-size: clamp(0.95rem, 2.8vw, 1.25rem);
      }

      .code-panel {
        box-shadow: 0 24px 44px -28px rgba(15, 23, 42, 0.55);
      }

      .code-panel-header {
        backdrop-filter: blur(12px);
      }

      .code-block {
        display: block;
        padding: clamp(1rem, 3vw, 1.5rem);
        font-size: clamp(0.75rem, 1.6vw, 0.95rem);
        line-height: 1.6;
        overflow-x: auto;
        background-color: rgba(15, 23, 42, 0.06);
      }

      .code-block pre {
        margin: 0;
        background: transparent !important;
      }

      .code-block code {
        font-family: ui-monospace, SFMono-Regular, SFMono, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      }

      .code-block::-webkit-scrollbar {
        height: 8px;
      }

      .code-block::-webkit-scrollbar-thumb {
        background-color: rgba(15, 23, 42, 0.2);
        border-radius: 9999px;
      }

      .code-block::-webkit-scrollbar-track {
        background: transparent;
      }

      @keyframes blob {
        0%, 100% { transform: translate(0px, 0px) scale(1); }
        33% { transform: translate(30px, -50px) scale(1.1); }
        66% { transform: translate(-20px, 20px) scale(0.9); }
      }
      
      .animate-blob {
        animation: blob 7s infinite;
      }
      
      .animation-delay-2000 {
        animation-delay: 2s;
      }
      
      .animation-delay-4000 {
        animation-delay: 4s;
      }

      .header-content.scrolled {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(14px);
        box-shadow: 0 10px 30px -18px rgba(15, 23, 42, 0.35);
      }
    </style>

    <script>
      const header = document.getElementById('header');
      const headerContent = header?.querySelector('.header-content');

      window.addEventListener('scroll', () => {
        if (window.pageYOffset > 50) {
          headerContent?.classList.add('scrolled');
        } else {
          headerContent?.classList.remove('scrolled');
        }
      });
    </script>

    <script>
      const navToggle = document.getElementById('mobile-nav-toggle');
      const navMenu = document.getElementById('header-nav');
      const hamburgerIcon = navToggle?.querySelector('.icon-hamburger');
      const closeIcon = navToggle?.querySelector('.icon-close');

      const syncNavState = () => {
        if (!navMenu || !navToggle) return;

        if (window.innerWidth >= 640) {
          navMenu.classList.remove('hidden');
          navToggle.classList.remove('is-open');
          navToggle.setAttribute('aria-expanded', 'false');
          hamburgerIcon?.classList.remove('hidden');
          closeIcon?.classList.add('hidden');
        } else if (!navToggle.classList.contains('is-open')) {
          navMenu.classList.add('hidden');
          hamburgerIcon?.classList.remove('hidden');
          closeIcon?.classList.add('hidden');
        }
      };

      navToggle?.addEventListener('click', () => {
        if (!navMenu) return;
        const isHidden = navMenu.classList.toggle('hidden');
        const isOpen = !isHidden;

        navToggle.classList.toggle('is-open', isOpen);
        navToggle.setAttribute('aria-expanded', String(isOpen));

        if (isOpen) {
          hamburgerIcon?.classList.add('hidden');
          closeIcon?.classList.remove('hidden');
        } else {
          hamburgerIcon?.classList.remove('hidden');
          closeIcon?.classList.add('hidden');
        }
      });

      navMenu?.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
          if (!navMenu || !navToggle) return;
          if (window.innerWidth < 640) {
            navMenu.classList.add('hidden');
            navToggle.classList.remove('is-open');
            navToggle.setAttribute('aria-expanded', 'false');
            hamburgerIcon?.classList.remove('hidden');
            closeIcon?.classList.add('hidden');
          }
        });
      });

      window.addEventListener('resize', syncNavState);
      document.addEventListener('DOMContentLoaded', syncNavState);
      syncNavState();
    </script>

    <script>
    // Get DOM elements
    const moduleButtons = document.querySelectorAll('.module-btn');
    const adapterButtons = document.querySelectorAll('.adapter-btn');
    const dashboardButtons = document.querySelectorAll('.dashboard-adapter-btn');

    const moduleCodeDisplay = document.getElementById('module-code-display');
    const dashboardCodeDisplay = document.getElementById('dashboard-code-display');

    const defaultModule = moduleCodeDisplay?.dataset.defaultModule ?? 'keyvalue';
    const defaultAdapter = moduleCodeDisplay?.dataset.defaultAdapter ?? 'memory';
    const defaultDashboard = dashboardCodeDisplay?.dataset.defaultDashboard ?? 'express';

    // State management
    let selectedModule = defaultModule;
    let selectedAdapter = defaultAdapter;
    let selectedDashboard = defaultDashboard;

    const moduleCodeExamples = document.querySelectorAll('[data-code-example]');
    const dashboardCodeExamples = document.querySelectorAll('[data-dashboard-code]');

    // Update button states
    function updateButtonStates(buttons, activeValue, dataAttribute) {
      buttons.forEach(btn => {
        const value = btn.getAttribute(dataAttribute);
        if (value === activeValue) {
          btn.classList.add('border-primary-9', 'shadow-sm');
          btn.classList.remove('border-primary-6');
        } else {
          btn.classList.remove('border-primary-9', 'shadow-sm');
          btn.classList.add('border-primary-6');
        }
      });
    }

    // Update module code display
    function updateModuleCode() {
      let hasActive = false;

      moduleCodeExamples.forEach(example => {
        const module = example.getAttribute('data-module');
        const adapter = example.getAttribute('data-adapter');
        const isActive = module === selectedModule && adapter === selectedAdapter;

        example.hidden = !isActive;
        example.setAttribute('aria-hidden', String(!isActive));

        if (isActive) {
          hasActive = true;
        }
      });

      if (moduleCodeDisplay) {
        moduleCodeDisplay.classList.toggle('hidden', !hasActive);
      }
    }

    // Update dashboard code display
    function updateDashboardCode() {
      let hasActive = false;

      dashboardCodeExamples.forEach(example => {
        const framework = example.getAttribute('data-framework');
        const isActive = framework === selectedDashboard;

        example.hidden = !isActive;
        example.setAttribute('aria-hidden', String(!isActive));

        if (isActive) {
          hasActive = true;
        }
      });

      if (dashboardCodeDisplay) {
        dashboardCodeDisplay.classList.toggle('hidden', !hasActive);
      }
    }

    // Module button click handlers
    moduleButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        if (btn.disabled) return;

        const module = btn.getAttribute('data-module');
        selectedModule = module;

        updateButtonStates(moduleButtons, module, 'data-module');
        updateModuleCode();
      });
    });

    // Adapter button click handlers
    adapterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const adapter = btn.getAttribute('data-adapter');
        selectedAdapter = adapter;

        updateButtonStates(adapterButtons, adapter, 'data-adapter');
        updateModuleCode();
      });
    });

    // Dashboard adapter button click handlers
    dashboardButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const framework = btn.getAttribute('data-framework');
        selectedDashboard = framework;

        updateButtonStates(dashboardButtons, framework, 'data-framework');
        updateDashboardCode();
      });
    });

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
      // Set initial states
      updateButtonStates(moduleButtons, selectedModule, 'data-module');
      updateButtonStates(adapterButtons, selectedAdapter, 'data-adapter');
      updateButtonStates(dashboardButtons, selectedDashboard, 'data-framework');

      // Show initial code examples
      updateModuleCode();
      updateDashboardCode();
    });
    </script>
  </body>
</html>
